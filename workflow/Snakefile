from Cython.Build import cythonize
import pandas as pd
import numpy as np
import os

configfile: "workflow/config/config.yml"

wildcard_constraints:
    run=r"\d+",
    runs=r"\d+",


pyr_path = "pyr/s={n_samples} sp={pyr_spec_edge_prob}/run/pyr_{run}.csv"
cx_path = "cx/e={exact} p={parallel} l={max_length} s={n_samples}/run/cx_{run}.csv"

cow_path = "results/real/{dataset}/year={year}/null_model_cow={null_model} d={directed}/"
dataset_path = "results/real/{dataset}/null_model={null_model} d={directed}/"
random_path = "results/synthetic/random/n={n_nodes} m={n_edges} r={neg_edge_prob} re={neg_edge_dist_exact} d={directed}/"
er_path = "results/synthetic/er/n={n_nodes} p={prob_p} r={neg_edge_prob} re={neg_edge_dist_exact} d={directed}/"
complete_path = "results/synthetic/complete/n={n_nodes} r={neg_edge_prob} re={neg_edge_dist_exact} d={directed}/"
sbm_path = "results/synthetic/sbm/exp={exp} re={neg_edge_dist_exact} d={directed}/"

def get_cython_cmd():
    if os.name == 'nt':
        return "python setup_balance.py build_ext --inplace && type NUL > {output}"
    else:
        # remove option '-a' if you don't need to debug / profile
        return "C_INCLUDE_PATH=$(python -c 'import numpy; print(numpy.get_include())') cythonize -i -a {input} && touch {output}"

rule cythonize:
    # Cythonizes the required files.
    input:
        "src/py_raccoon/balance_sampling.pyx",
        "src/py_raccoon/balance_spanning_trees.pyx"
    output:
        # actual output filename sytem-dependent and not relevant -> __cythonized__ used to mark dependencies and detect changes by snakemake.
        "results/__cythonized__"
    shell:
        get_cython_cmd()

rule combine_exps:
    input: 
        lambda wildcards: expand("{{path}}/run/{{alg}}_{run}.csv", run=list(range(0, int(wildcards.runs) + 1))),
    output: 
        "{path}/{alg}_{runs}_combined.csv",
    run:
        df_data = pd.concat([pd.read_csv(file) for file in input])
        df_data.to_csv(output[0])

# ----- TEST EXPERIMENTS -----

# ----- TO DO EXPERIMENTS -----

rule er_exp_cx_exact:
    input:
        expand("results/synthetic/er/n={n} p={p} r={r} re=False d=False/cx/e=True p=False l=20 s=1/cx_{runs}_combined.csv", r = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], n = range(4, 26), p = [0.25, 0.5], runs=0),

rule complete_exp_pyr:
    expand("results/synthetic/complete/n={n} r={r} re=False d=False/pyr/s=1000 sp=None/pyr_0_combined.csv", r = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], n = range(1, 21)),

# ----- COMPLETED EXPERIMENTS ON REAL-WORLD NETWORKS -----

rule wikielections_exp_pyr:
    input:
        "results/real/wikielections/null_model=True d=False/pyr/s=1500 sp=None/pyr_0_combined.csv",
        "results/real/wikielections/null_model=False d=False/pyr/s=1500 sp=None/pyr_0_combined.csv",

rule gahuku_exp_cx_exact:
    input:
        expand("results/real/gahuku/null_model={null_model} d=False/cx/e=True p=False l=15 s=1/cx_0_combined.csv", null_model=["True", "False"]),

rule gahuku_exp_pyr:
    input:
        expand("results/real/gahuku/null_model={null_model} d=False/pyr/s=10000 sp=None/pyr_0_combined.csv", null_model=["True", "False"]),

rule wikielections_exp_cx_approx:
    input:
        "results/real/wikielections/null_model=True d=False/cx/e=False p=False l=15 s=500/cx_0_combined.csv",
        "results/real/wikielections/null_model=False d=False/cx/e=False p=False l=15 s=500/cx_0_combined.csv",

rule slashdot_exp_cx_approx:
    input:
        "results/real/slashdot/null_model=True d=False/cx/e=False p=False l=10 s=10/cx_0_combined.csv",
        "results/real/slashdot/null_model=False d=False/cx/e=False p=False l=10 s=10/cx_0_combined.csv",

rule slashdot_exp_pyr:
    input:
        "results/real/slashdot/null_model=True d=False/pyr/s=100 sp=None/pyr_0_combined.csv",
        "results/real/slashdot/null_model=False d=False/pyr/s=100 sp=None/pyr_0_combined.csv",

rule cow_exp_cx_approx:
    input:
        expand("results/real/cow/year={year}/null_model_cow={null_model} d=False/cx/e=False p=False l=10 s=20/cx_0_combined.csv", null_model = ["True", "False"], year= range(1816, 2013)),

rule cow_exp_pyr:
    input:
        expand("results/real/cow/year={year}/null_model_cow={null_model} d=False/pyr/s=100 sp=None/pyr_0_combined.csv", null_model = ["True", "False"], year = range(1816, 2013)),

# ----- COMPLETED EXPERIMENTS ON COMPLETE GRAPHS ----- 

rule complete_exp_cx_exact:
    input:
        expand("results/synthetic/complete/n={n} r={r} re=False d=False/cx/e=True p=False l=20 s=1/cx_0_combined.csv", r = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], n = range(1, 21)),

rule complete_exp_negative_edges:
    input:
        expand("results/synthetic/complete/n=11 r={r} re=True d=False/cx/e=True p=False l=10 s=1/cx_0_combined.csv", r = np.arange(0, 1, 0.0181818181818)),
        expand("results/synthetic/complete/n=10 r={r} re=True d=False/cx/e=True p=False l=10 s=1/cx_0_combined.csv", r = np.arange(0, 1, 0.022222222222)),

rule complete_exp_all_negative_graph:
    input:
        expand("results/synthetic/complete/n={n} r=1 re=False d=False/cx/e=True p=False l=10 s=1/cx_0_combined.csv", n = range(3, 26)),

rule complete_time_exp_samples_cx_approx:
    input: 
        expand("results/synthetic/complete/n=20 r=0.5 re=False d=False/cx/e=False p=False l=10 s={s}/cx_0_combined.csv", s=[1, 10, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]),

rule complete_time_exp_samples_pyr:
    input:
        expand("results/synthetic/complete/n=20 r=0.5 re=False d=False/pyr/s={s} sp=None/pyr_0_combined.csv", s=[1, 10, 100, 1000, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]),

rule complete_time_exp_lengths_cx_approx:
    input:
        expand("results/synthetic/complete/n=15 r=0.5 re=False d=False/cx/e=False p=False l={l} s=100/cx_0_combined.csv", l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 

rule complete_time_exp_cx_approx:
    input:
        expand("results/synthetic/complete/n={n} r=0.5 re=False d=False/cx/e=False p=False l=11 s=100/cx_0_combined.csv", n=range(5, 401, 5)),
        expand("results/synthetic/complete/n={n} r=0.5 re=False d=False/cx/e=False p=False l=12 s=10/cx_0_combined.csv", n=range(5, 401, 5)),

rule complete_time_exp_cx_approx_and_pyr:
    input:
     expand("results/synthetic/complete/n={n} r=0.5 re=True d=False/cx/e=False p=False l=10 s=1000/cx_0_combined.csv", n=range(4, 401)),
     expand("results/synthetic/complete/n={n} r=0.5 re=True d=False/pyr/s=1000 sp=None/pyr_0_combined.csv", n=range(4, 401)),




# RULES 

rule cow_pyr:
    input: 
        "results/__cythonized__"
    output:
        cow_path + pyr_path,
    params:
        kind = "dataset",
        alg = "pyr"
    script:
        "scripts/experiment.py"

rule cow_cx:
    input: 
        "results/__cythonized__"
    output:
        cow_path + cx_path,
    params:
        kind = "dataset",
        alg = "cx"
    script:
        "scripts/experiment.py"


rule dataset_pyr:
    input: 
        "results/__cythonized__"
    output:
        dataset_path + pyr_path,
    params:
        kind = "dataset",
        alg = "pyr"
    script:
        "scripts/experiment.py"

rule dataset_cx:
    input: 
        "results/__cythonized__"
    output:
        dataset_path + cx_path,
    params:
        kind = "dataset",
        alg = "cx"
    script: 
        "scripts/experiment.py"

rule random_pyr:
    #threads: 1 
    input:
        "results/__cythonized__"
    output:
        random_path + pyr_path,
    params:
        kind = "random",
        alg = "pyr",
    script:
        "scripts/experiment.py"

rule random_cx:
    #threads: 1 
    input:
        "results/__cythonized__"
    output:
        random_path + cx_path,
    params:
        kind = "random",
        alg="cx",
    script:
        "scripts/experiment.py"

rule complete_pyr:
    #threads: 1 
    input:
        "results/__cythonized__"
    output:
        complete_path + pyr_path, 
    params:
        kind = "complete",
        alg = "pyr",
    script:
        "scripts/experiment.py"

rule complete_cx:
    #threads: 1 
    input:
        "results/__cythonized__"
    output:
        complete_path + cx_path, 
    params:
        kind = "complete",
        alg="cx",
    script:
        "scripts/experiment.py"

rule er_pyr:
    #threads: 1 
    input:
        "results/__cythonized__"
    output:
        er_path + pyr_path, 
    params:
        kind = "er",
        alg = "pyr"
    script:
        "scripts/experiment.py"

rule er_cx:
    #threads: 1 
    input:
        "results/__cythonized__"
    output:
        er_path + cx_path, 
    params:
        kind = "er",
        alg="cx",
    script:
        "scripts/experiment.py"
    
rule sbm_pyr:
    #threads: 1 
    input:
        "results/__cythonized__"
    output:
        sbm_path + pyr_path
    params:
        kind = "sbm",
        alg = "pyr",
        com_sizes = lambda wildcards: config['sbm-exps'][int(wildcards.exp)]['sizes'],
        edge_probs = lambda wildcards: config['sbm-exps'][int(wildcards.exp)]['p'],
        neg_edge_probs = lambda wildcards: config['sbm-exps'][int(wildcards.exp)]['r'],
    script:
        "scripts/experiment.py"

rule sbm_cx:
    #threads: 1 
    input:
        "results/__cythonized__"
    output:
        sbm_path + cx_path,
    params:
        kind = "sbm",
        alg="cx",
        com_sizes = lambda wildcards: config['sbm-exps'][int(wildcards.exp)]['sizes'],
        edge_probs = lambda wildcards: config['sbm-exps'][int(wildcards.exp)]['p'],
        neg_edge_probs = lambda wildcards: config['sbm-exps'][int(wildcards.exp)]['r'],
    script:
        "scripts/experiment.py"